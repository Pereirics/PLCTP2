program -> declist start funlist entrypoint stmtlist
start -> <empty>
entrypoint -> <empty>
fun -> DEF fun_name ( funargs ) ftype { stmtlist }
fun_name -> ID
ftype -> type
stmt -> PRINT ( expr ) ;
stmt -> PRINTLN ( ) ;
stmt -> WHILE new_label ( expr ) jz block
stmt -> IF ( expr ) jz block
stmt -> IF ( expr ) jz block ELSE jmp jz_label block
jmp -> <empty>
jz -> <empty>
jz_label -> <empty>
new_label -> <empty>
var_declare -> VAR ID [ NUM ] type ;
var_declare -> VAR ID [ NUM ] [ NUM ] type ;
var_declare -> VAR ID type = expr ;
var_declare -> VAR ID type ;
stmt -> ID = expr ;
stmt -> expr [ expr ] = expr ;
stmt -> RETURN expr ;
stmt -> RETURN ;
stmt -> expr ;
expr -> INPUT ( )
expr -> STR ( expr )
expr -> ATOI ( expr )
expr -> expr + expr
expr -> expr - expr
expr -> expr * expr
expr -> expr / expr
expr -> expr % expr
expr -> expr OR expr
expr -> expr AND expr
expr -> expr > expr
expr -> expr < expr
expr -> expr GTE expr
expr -> expr LTE expr
expr -> expr EQ expr
expr -> expr NEQ expr
expr -> expr $ expr
expr -> ! expr
expr -> - expr
expr -> ID
expr -> expr [ expr ]
expr -> STRING
expr -> NUM
expr -> ID ( fcall )
expr -> ( expr )
type -> STRINGTYPE
type -> INTTYPE
type -> VOIDTYPE
type -> [ type ]
declist -> declist var_declare
declist -> <empty>
funlist -> funlist fun
funlist -> <empty>
stmtlist -> stmtlist stmt
stmtlist -> <empty>
funargs -> idlist
funargs -> <empty>
idlist -> idlist , ID type
idlist -> ID type
fcall -> exprlist
fcall -> <empty>
exprlist -> exprlist , expr
exprlist -> expr
block -> { stmtlist }
block -> stmt
